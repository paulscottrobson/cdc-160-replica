
// *********************************************************************************************
//
//	@C 				Code for testing @J conditions
//	@J 				ZJ NZ PJ NJ dependent on lower 2 bits
//	@M 				D I F B dependent on lower 2 bits.
//	@READ() 		Reads Memory[S] into Z
//	@WRITE() 		Write Z into Memory[S]
//
// 	$ROTATE(A,Z)	Rotate A according to opcode Z (SHA Instruction)
//
//	From 10-47 indirect operations execute +1 cycle.
//
// *********************************************************************************************

// *********************************************************************************************
//								1. Read next instructions
// *********************************************************************************************

#@RNI 			$B = ($P + 1) & 07777 ; B->S ; S->P ; @READ()

// *********************************************************************************************
//								2. Jump to next instruction
// *********************************************************************************************

#@JNIF 			P + ZL -> B ; B -> S ; S -> P ; @READ()
#@JNIB 			P - ZL -> B ; B -> S ; S -> P ; @READ()
#@JNII 			Z -> B;B -> S;S -> P;@READ()

// *********************************************************************************************
//								 3. Store Contents of A
// *********************************************************************************************

#@STA 			A -> B; B -> Z; @WRITE()

// *********************************************************************************************
//								4. Read operand sequences
// *********************************************************************************************

#@ROPDD 		ZL -> B ; B -> S ; @READ()
#@ROPDI 		ZL -> B ; B -> S ; @READ(); Z -> B ; B -> S ; @READ()
#@ROPDF 		P + ZL -> B ; B -> S ; @READ()
#@ROPDB 		P - ZL -> B ; B -> S ; @READ()
#@ROPDX 		ZL -> Z

// *********************************************************************************************
//										Shift A
// *********************************************************************************************

01 		1	"SHA .C"		
	(1)		$B = $ROTATE($A,$Z)
	(2)		B -> A
	(3) 	@RNI

// *********************************************************************************************
//									Logical Product (AND)
// *********************************************************************************************

02 		1 	"LPN .C"
	(1) 	@ROPDX
	(2) 	A & Z -> B
	(3) 	B -> A
	(4) 	@RNI

10-13	2 	"LP@M .@M"
	(1) 	@ROPD@M
	(2) 	A & Z -> B
	(3) 	B -> A
	(4) 	@RNI

// *********************************************************************************************
//								   Logical Sum (Exclusive OR)
// *********************************************************************************************

03 		1 	"LSN .C"
	(1) 	@ROPDX
	(2) 	A ^ Z -> B
	(3) 	B -> A
	(4) 	@RNI

14-17	2 	"LS@M .@M"
	(1) 	@ROPD@M
	(2) 	A ^ Z -> B
	(3) 	B -> A
	(4) 	@RNI

// *********************************************************************************************
//								   				Load
// *********************************************************************************************

04 		1 	"LDN .C"
	(1) 	@ROPDX
	(2) 	Z -> B
	(3) 	B -> A
	(4) 	@RNI

20-23	2 	"LD@M .@M"
	(1) 	@ROPD@M
	(2) 	Z -> B
	(3) 	B -> A
	(4) 	@RNI

// *********************************************************************************************
//								   			Load Complement
// *********************************************************************************************

05 		1 	"LCN .C"
	(1) 	@ROPDX
	(2) 	0 - Z -> B
	(3) 	B -> A
	(4) 	@RNI

24-27	2 	"LC@M .@M"
	(1) 	@ROPD@M
	(2) 	0 - Z -> B
	(3) 	B -> A
	(4) 	@RNI

// *********************************************************************************************
//								   				  Add
// *********************************************************************************************

06 		1 	"ADN .C"
	(1) 	@ROPDX
	(2) 	A + Z -> B
	(3) 	B -> A
	(4) 	@RNI

30-33	2 	"AD@M .@M"
	(1) 	@ROPD@M
	(2) 	A + Z -> B
	(3) 	B -> A
	(4) 	@RNI

// *********************************************************************************************
//								   			   Subtract
// *********************************************************************************************

07 		1 	"SBN .C"
	(1) 	@ROPDX
	(2) 	A - Z -> B
	(3) 	B -> A
	(4) 	@RNI

34-37	2 	"SB@M .@M"
	(1) 	@ROPD@M
	(2) 	A - Z -> B
	(3) 	B -> A
	(4) 	@RNI

// *********************************************************************************************
//												  Store
// *********************************************************************************************

40 		3 	"STD .D"
	(1) 	ZL -> B
	(2) 	B -> S
	(3) 	@STA

41 		4 	"STI .I"
	(1) 	ZL -> B
	(2) 	B -> S
	(3) 	@READ()
	(4) 	Z -> B
	(5) 	B -> S
	(6) 	@STA
	(7) 	@RNI

42 		3 	"STF .F"
	(1) 	P + Z -> B
	(2) 	B -> S
	(3) 	@STA
	(4) 	@RNI

43 		3 	"STB .B"
	(1) 	P - Z -> B
	(2) 	B -> S
	(3) 	@STA
	(4) 	@RNI

// *********************************************************************************************
//											Shift Replace
// *********************************************************************************************

44-47 	3 	"SR@M @M"
	(1)		@ROPD@M
	(2) 	Z + Z -> B
	(3) 	B -> Z
	(4) 	B -> A
	(5) 	@WRITE()
	(6)		@RNI

// *********************************************************************************************
//											Replace Add
// *********************************************************************************************

50-53 	3 	"RA@M @M"
	(1) 	@ROPD@M
	(2) 	A + Z -> B
	(3) 	B -> A
	(4) 	B -> Z
	(5) 	@WRITE()
	(6)		@RNI

// *********************************************************************************************
//										  Replace Add One
// *********************************************************************************************

54-57 	3 	"RO@M @M"
	(1) 	@ROPD@M
	(2) 	1 + Z -> B
	(3) 	B -> A
	(4) 	B -> Z
	(5) 	@WRITE()
	(6)		@RNI

// *********************************************************************************************
//											Forward Jumps
// *********************************************************************************************

60-63 	1 	"@JF .F"
	(1) 	if (@C) { @JNIF(); } else { @RNI; }

// *********************************************************************************************
//											Backward Jumps
// *********************************************************************************************

64-67 	1 	"@JB .B"
	(1) 	if (@C) { @JNIB(); } else { @RNI; }

// *********************************************************************************************
//											Indirect Jumps
// *********************************************************************************************

70 		2	"JPI .I"
	(1) 	ZL -> B
	(2) 	B -> S
	(3) 	@READ()
	(4) 	@JNII

71 		2 	"JFI .F"
	(1) 	ZL + P -> B
	(2) 	B -> S
	(3) 	@READ()
	(4) 	@JNII

// *********************************************************************************************
//										Input/Output
// *********************************************************************************************

//	Data transfer to/from Z on $PHASE 2 got 72-76. If PHASE=2 either XMit or wait for receive.
// 	Error goes to $PHASE 3

72 		2 	"INP .F"
	(1)		if ($PHASE == 0) { @ROPDF; Z -> A; P + 1 -> P; $PHASE = 2; }
	(4)		if ($PHASE == 2) { $CYCLES += 2;A -> S;@WRITE();A + 1 -> A;P -> S;@READ();if ($Z == $A) { $PHASE = 3; }
	(8) 	if ($PHASE == 3) { @RNI; $PHASE = 0; }

73 		2 	"OUT .F"
	(1) 	if ($PHASE == 0) { @ROPDF; Z -> A; P + 1 -> P;$PHASE = 1; }
	(2) 	if ($PHASE == 1) { $CYCLES += 2; A -> S;@READ();$PHASE = 2; }
	(3) 	if ($PHASE == 2) { A + 1 -> A; P -> S; @READ(); if ($Z == $A) { $PHASE = 3 }}
	(4) 	if ($PHASE == 3) { @RNI; $PHASE = 0; }

74 		1 	"OTN .C"
	(1) 	if ($PHASE == 0) { ZL -> Z; $PHASE = 2; }
	(2) 	if ($PHASE == 2) { @RNI; $PHASE = 0; }

75 		2 	"EXF .F"
	(1) 	if ($PHASE == 0) { @ROPDF; $PHASE = 2; }
	(2)		if ($PHASE == 2) { @RNI; $PHASE = 0; }

76 		1 	"INA"
	(1)		if ($PHASE == 0) { $PHASE = 2; }
	(2) 	if ($PHASE == 2) { Z -> A;@RNI;$PHASE = 0; }

// *********************************************************************************************
//											Halt / Error
// *********************************************************************************************

77 		1 	"HLT .C"
	(1) 	$HALT = 1

00 		1 	"ERR .C"
	(1) 	$HALT = 1

//	This is a pseudo operation which is executed when you resume.

80 		1 	"RSM .C"
	(1) 	$HALT = 0
