

#	%m 		D I F B depending on 2 lower bits. For 60-67 f/b depending on bit 2.
#	%e 		EAC for D I F B
#	%a 		$d ($d) $f $b

# **********************************************************************************************
# 										Halt and Error
# **********************************************************************************************

00 		1 		"err $c:error #$c"
	halt = 1;

77 		1 		"hlt $c:error #$c"
	halt = 1;

# **********************************************************************************************
#											 Shift
# **********************************************************************************************

01 		1 		"sha $c:shift #$c"
	z = rotate(a); 
	a = ((mb & 2) != 0) ? z : 0;
	z = rotate(z);
	z = rotate(z);
	if ((mb & 8) != 0) { a = add(a,z); }
	rni();

# **********************************************************************************************
#									Logical Product (And)
# **********************************************************************************************

02 		1 		"lpn $c:and #$c"
	a = a & (z & 0x3F);
	rni();

10-13 	2		"lp%m $%m:and %a"
	%e;read();
	a = a & z;
	rni();

# **********************************************************************************************
#									   Logical Sum (Xor)
# **********************************************************************************************

03 		1 		"lsn $c:xor #$c"
	a = a ^ (z & 0x3F);
	rni();

14-17 	2		"ls%m $%m:xor %a"
	%e;read();
	a = a ^ z;
	rni();

# **********************************************************************************************
#									   			Load 
# **********************************************************************************************

04 		1 		"ldn $c:lda #$c"
	a = (z & 0x3F);
	rni();

20-23 	2		"ld%m $%m:lda %a"
	%e;read();
	a = z;
	rni();

# **********************************************************************************************
#									   		Load Complement
# **********************************************************************************************

05 		1 		"lcn $c:ldc #$c"
	a = (z & 0x3F) ^ COMPLEMENT;
	rni();

24-27 	2		"lc%m $%m:ldc %a"
	%e;read();
	a = z ^ COMPLEMENT;
	rni();

# **********************************************************************************************
#									   			Add
# **********************************************************************************************

06 		1 		"adn $c:add #$c"
	a = add(a,z & 0x3F);
	rni();

30-33 	2		"ad%m $%m:add %a"
	%e;read();
	a = add(a,z)
	rni();

# **********************************************************************************************
#									   		  Subtract
# **********************************************************************************************

07 		1 		"sbn $c:sub #$c"
	a = add(a,(z & 0x3F) ^ COMPLEMENT);
	rni();

34-37 	2		"sb%m $%m:sub %a"
	%e;read();
	a = add(a,z ^ COMPLEMENT)
	rni();

# **********************************************************************************************
#									   		  Store
# **********************************************************************************************

40-43 	3 		"st%m $%m:sta %a"
	%e;
	z = a;write();
	rni();

# **********************************************************************************************
#									   	   Shift Replace
# **********************************************************************************************

44-47 	3 		"sr$m $%m:srm %a"
	%e;read();
	z = rotate(z);a = z;
	write();
	rni();

# **********************************************************************************************
#									   	   Shift Replace
# **********************************************************************************************

50-53 	3 		"ra$m $%m:adm %a"
	%e;read();
	z = add(a,z);a = z;
	write();
	rni();

# **********************************************************************************************
#									   	   Replace Add
# **********************************************************************************************

50-53 	3 		"ra$m $%m:adm %a"
	%e;read();
	z = add(a,z);a = z;
	write();
	rni();

# **********************************************************************************************
#									   	  Replace Add One
# **********************************************************************************************

54-57 	3 		"ao$m $%m:ild %a"
	%e;read();
	z = add(1,z);a = z;
	write();
	rni();

# **********************************************************************************************
#									   	 Conditional Branches
# **********************************************************************************************

60,64 	1 		"zj%m $%m:jz %a"
	%e;
	if (a == 0) p = s;
	rni();

61,65 	1 		"nz%m $%m:jnz %a"
	%e;
	if (a != 0) p = s;
	rni();

62,66 	1 		"pj%m $%m:jp %a"
	%e;
	if ((a & 0x400) == 0) p = s;
	rni();

63,67 	1 		"nj%m $%m:jm %a"
	%e;
	if ((a & 0x400) != 0) p = s;
	rni();

# **********************************************************************************************
#									   	 	Indirect Jumps
# **********************************************************************************************

70 		2 		"jpi $d:jmp ($d)"
	s = z & 0x3F;
	read();
	pc = z;
	rni();

71 		2 		"jfi $f:jmp ($f)"
	s = ((z & 0x3F) + pc) & 0xFFF;
	read();
	pc = z;
	rni();

# **********************************************************************************************
#										  Input/Output commands
# **********************************************************************************************
